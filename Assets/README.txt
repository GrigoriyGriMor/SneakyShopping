//---Log Of Memory - Team рекомендует ознакомится с кратким руководством по классам в этом проекте---//

Краткое описание классов в игре и основных фишек.


1. Управление персонажем осуществляется в классе MoveController.
visualPlayer = в инспекторе обязательно необходимо присвоить дочерний элемент с именем VisualAll, отвечает за поворот персонажа в пространстве
AnimCar = необходимо присвоить аниматор находящийся на объекте "Машина"
Так же тут можно настроить скорость персонажа.

2. Боты: CompetitorController отвечает за управление ботами, там можно указать их скорость и т.д.
Обязательно нужно указать ExitZone. Иначе класс не будет работать. (боты не будут понимать куда надо бежать, когда вещи собранны)

3. управление камерой: CameraController 
Обязательно нужно указать: 
endPos - отвечает за позицию, в которую камера полетит по окончанию игры.
endTarget - то куда в конце игры будет смотреть камера, указываем точку примерно в центре персонажа

4. MaterialAsset - здесь мы храним материалы, которые будут накидываться на одежду, которая востанавливается на полках магазина

5. WardrobeCollection - отвечает за то, к каким шкафам могут бегать боты. Основная переменная visibleDistance. 
Отвечает за то на какую дистанцию от персонажа могут отбегать боты в поисках одежды.

6. DressAsset это подкласс, который хранит в себе данные об одежде. (ее меш, ее ID, ее позицию для нового спавна и другие настройки)
хранится в виде массива в классе WardrobeController

7. WardrobeController - класс=шкаф. Хранит в себе набор одежды, которую может подобрать игрок, а так же контролирует время спавна после подбора. 
что бы игрок мог взаимодействовать с одеждой, обязательно нужно добавить ее класс (DressAsset) в шкаф и указать все данные.
minLocalDist - отвечает за дистанцию подбора на которую должны подойти боты/игрок, что бы подобрать конкретную одежду в шкафу
spawnMultiple - множитель времени респа одежды. (время респа = вес одежды * spawnMultiple, например weighg = 5, а spawnMultiple = 2, тогда спавн тайм будет равен 10)

8. GameController - основной класс в игре. В нем мы заполняем все пола с UI. а так же объекты которые должны включаться/выключаться в зависимости от ситуации в игре.
Совет по использованию - сохранить где-нибудь рабочую демо сцену и сравнивать данные с ней (если сбились настройки). 
При переносе уровня обязательно важно переносить все объекты вместе с контроллером. 
nextLevelID - на каждом уровне необходимо указать ID следующего уровня. (ID находится в File->BuildSetting-> (в поле включенных в проект сцен, с правой стороны))
maxGameTime - время уровня (условились на 30 сек)
nextLevelCountPlus - сколько необходимо очков, что бы выйграть следующий уровень.

9. PlayerController - Класс управления подбором одежды игроком. 
Основное это параметр HaveDress. Массив содержит набор одежды, которую игрок сможет подбирать и которая будет отображаться с учетом бленд шейпа.
Важно указывать состояния одежды: (shlapa, boti, botySpilka, losini, yubka, bottomDress, topDress, other)
Шляпы/Боты/БотыШпилька/Лосины - не используют блендШейп, они меняются при подборе, поэтому важно так же указывать current одежду на старте.
TopDress/BottomDress/Other используют бленд шейпы + 25 на каждую подобранную одежду своего типа. (то есть у второй подобранной куртки будет бленд шейп 50%, 
а у вторых штанов тоже 50%, так как их блендшейпы считаются отдельно)
Юбки работают по другому принципу, они заменяются, но используют бленд шейпы.
Поэтому на каждый конкретный тип одежды, необходимо указывать свой тип состояния. 
Так же сумки и шляпы имеют на себе MeshRender, в отличии от другой одежды, так как они не привязаны к скелету персонажа. И играют свою логику. 
в HaveDress MeshRender указываеся массивом. (что бы можно было использовать множество сумок например)
maxWeight - максимальный вес, который может подобрать персонаж = 10, то есть 100%
Можно указать и больше, но нужно учитывать, что бленд шейп на одежде не бесконечный и увеличение веса может повлиять на корректность отображения, а точнее одежда может начать просвечивать.
РЕКОМЕНДАЦИЯ: использовать веса одежды на шкафах не более 2-3, а максимальный вес указывать не более 10. 
convectorMultiple - множитель получаемых очков при сдаче одежды в ExitZone. Если вес был 2, а мультиплай был 5, то игрок получит за эту одежду 10 очков.

Основные рекомендации: 
1. При переносе уровня, или дублировать всю сцену и вносить изменения уже в ней. Или копировать все обьекты с уровня, 
кроме SceneObj и DressObj и переносить в новую сцену(мы делали так).
2. При создании новой сцены, после того как все обьекты были раставленны,
ВАЖНО запечь NavMeshMap. Что бы это сделать, надо все статичные объекты отметить как стачичные, 
а после зайти в Windows->Navigation->Bake и нажать Bake. Далее карта в течении некоторого времени будет запечена и боты оживут.